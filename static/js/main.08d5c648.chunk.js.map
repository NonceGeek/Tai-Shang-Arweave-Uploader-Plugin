{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","defaultCurrency","defaultSelection","currency","setCurrency","React","useState","address","setAddress","selection","setSelection","balance","setBalance","img","setImg","price","setPrice","bundler","setBundler","bundlerHttpAddress","setBundlerAddress","fundAmount","setFundingAmount","withdrawAmount","setWithdrawAmount","provider","setProvider","toast","useToast","intervalRef","useRef","tagValue","setTagValue","tagValueOfTxt","setTagValueOfTxt","lastTxId","setLastTxId","txt","setTxt","txtPrice","setTxtPrice","sig","setSig","clean","async","clearInterval","current","undefined","handleUpload","files","evt","target","reader","FileReader","length","onload","result","Buffer","from","readAsArrayBuffer","connectWeb3","p","providers","Web3Provider","connector","_ready","providerMap","MetaMask","window","ethereum","isMetaMask","enable","chainId","c","toString","request","method","params","e","code","rpcUrls","chainName","WalletConnect","WalletConnectProvider","currencyMap","matic","opts","toProperCase","s","charAt","toUpperCase","substring","toLowerCase","parseInput","input","conv","BigNumber","multipliedBy","currencyConfig","base","isLessThan","status","title","mt","as","Button","rightIcon","Object","keys","map","v","onClick","disabled","indexOf","w","colorScheme","pname","cname","console","log","providerInstance","catch","duration","initProvider","bundlr","WebBundlr","utils","getBundlerAddress","ready","err","initBundlr","value","onChange","placeholder","getBalance","then","res","setInterval","getLoadedBalance","r","_","toggleRefresh","label","style","whiteSpace","unitConverter","toFixed","ticker","fund","description","id","data","message","withdrawBalance","tx_id","fontSize","event","fileInputEl","document","createElement","type","accept","display","body","appendChild","addEventListener","removeChild","click","getPrice","uploader","upload","name","minHeight","marginTop","width","justifyContent","text","msg","send","ReactDOM","render","StrictMode","theme","getElementById"],"mappings":"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","file":"static/js/main.08d5c648.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { WebBundlr } from \"@bundlr-network/client\";\nimport BigNumber from \"bignumber.js\";\nimport { Button } from \"@chakra-ui/button\";\nimport {\n  Input,\n  HStack,\n  Text,\n  VStack,\n  useToast,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Tooltip,\n  Textarea,\n  Divider,\n  Code\n} from \"@chakra-ui/react\";\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\n\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { providers } from \"ethers\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ndeclare var window: any; // TODO: specifically extend type to valid injected objects.\n\nfunction App() {\n  const defaultCurrency = \"Select a Currency\";\n  const defaultSelection = \"Select a Provider\";\n  const [currency, setCurrency] = React.useState<string>(defaultCurrency);\n  const [address, setAddress] = React.useState<string>();\n  const [selection, setSelection] = React.useState<string>(defaultSelection);\n  const [balance, setBalance] = React.useState<string>();\n  const [img, setImg] = React.useState<Buffer>();\n  const [price, setPrice] = React.useState<BigNumber>();\n  const [bundler, setBundler] = React.useState<WebBundlr>();\n  const [bundlerHttpAddress, setBundlerAddress] = React.useState<string>(\n    \"https://node1.bundlr.network\"\n  );\n  const [fundAmount, setFundingAmount] = React.useState<string>();\n  const [withdrawAmount, setWithdrawAmount] = React.useState<string>();\n  const [provider, setProvider] = React.useState<Web3Provider>();\n\n  const toast = useToast();\n  const intervalRef = React.useRef<number>();\n\n  const [tagValue, setTagValue] = React.useState<string>(\"image/png\");\n  const [tagValueOfTxt, setTagValueOfTxt] =\n    React.useState<string>(\"application/elixir\");\n\n\n  const [lastTxId, setLastTxId] = useState(\"\");\n  const [txt, setTxt] = React.useState<string>(\"just a piece of word\");\n  const [txtPrice, setTxtPrice] = React.useState<BigNumber>();\n\n  const [sig, setSig] = useState(\"\");\n\n  const clean = async () => {\n    clearInterval(intervalRef.current);\n    setBalance(undefined);\n    setImg(undefined);\n    setPrice(undefined);\n    setBundler(undefined);\n    setProvider(undefined);\n    setAddress(undefined);\n    setCurrency(defaultCurrency);\n    setSelection(defaultSelection);\n  };\n\n  const signMsg = async() => {\n    if(provider){\n      var msg = `{ \"uploader\": \"${address}\", \"tx_hash\": \"${lastTxId}\", \"resource_link\": \"https://arweave.net/${lastTxId}\", \"copy_from\": \"bundlr\" }`\n      setSig(await provider.send(\"personal_sign\", [ msg, address ]));\n      console.log(sig);\n    }\n  }\n\n  const handleFileClick = () => {\n    var fileInputEl = document.createElement(\"input\");\n    fileInputEl.type = \"file\";\n    fileInputEl.accept = \"image/*\";\n    fileInputEl.style.display = \"none\";\n    document.body.appendChild(fileInputEl);\n    fileInputEl.addEventListener(\"input\", function (e) {\n      handleUpload(e as any);\n      document.body.removeChild(fileInputEl);\n    });\n    fileInputEl.click();\n  };\n\n  const handleUpload = async (evt: React.ChangeEvent<HTMLInputElement>) => {\n    let files = evt.target.files;\n    let reader = new FileReader();\n    if (files && files.length > 0) {\n      reader.onload = function () {\n        if (reader.result) {\n          setImg(Buffer.from(reader.result as ArrayBuffer));\n        }\n      };\n      reader.readAsArrayBuffer(files[0]);\n    }\n  };\n\n  const handlePrice = async () => {\n    if (img) {\n      const price = await bundler?.utils.getPrice(\n        currency as string,\n        img.length\n      );\n      //@ts-ignore\n      setPrice(price?.toString());\n    }\n  };\n\n  const handleTxtPrice = async () => {\n    if (txt) {\n      const price = await bundler?.utils.getPrice(\n        currency as string,\n        Buffer.from(txt, \"utf8\").length\n      );\n      //@ts-ignore\n      setTxtPrice(price?.toString());\n    }\n  };\n\n  const uploadFile = async () => {\n    if (img) {\n      await bundler?.uploader\n        .upload(img, [{ name: \"Content-Type\", value: tagValue }])\n        .then(res => {\n          toast({\n            status:\n              res?.status === 200 || res?.status === 201 ? \"success\" : \"error\",\n            title:\n              res?.status === 200 || res?.status === 201\n                ? \"Successful!\"\n                : `Unsuccessful! ${res?.status}`,\n            description: res?.data.id\n              ? `https://arweave.net/${res.data.id}`\n              : undefined,\n            duration: 15000,\n          });\n          window.lastTxId = res.data.id;\n          setLastTxId(res.data.id);\n          console.log(\"uploaded tx id is \" + window.lastTxId);\n        })\n        .catch(e => {\n          toast({ status: \"error\", title: `Failed to upload - ${e}` });\n        });\n    }\n  };\n\n  // add by @leeduckgo\n  const uploadTxt = async () => {\n    if (txt) {\n      await bundler?.uploader\n        .upload(Buffer.from(txt, \"utf8\"), [\n          { name: \"Content-Type\", value: tagValueOfTxt },\n        ]) // transfer txt to buffer.\n        .then(res => {\n          toast({\n            status:\n              res?.status === 200 || res?.status === 201 ? \"success\" : \"error\",\n            title:\n              res?.status === 200 || res?.status === 201\n                ? \"Successful!\"\n                : `Unsuccessful! ${res?.status}`,\n            description: res?.data.id\n              ? `https://arweave.net/${res.data.id}`\n              : undefined,\n            duration: 15000,\n          });\n          window.lastTxId = res.data.id;\n          setLastTxId(res.data.id);\n          console.log(\"uploaded tx id is \" + window.lastTxId);\n        })\n        .catch(e => {\n          toast({ status: \"error\", title: `Failed to upload - ${e}` });\n        });\n    }\n  };\n\n  const fund = async () => {\n    if (bundler && fundAmount) {\n      toast({ status: \"info\", title: \"Funding...\", duration: 15000 });\n      const value = parseInput(fundAmount);\n      if (!value) return;\n      await bundler\n        .fund(value)\n        .then(res => {\n          toast({\n            status: \"success\",\n            title: `Funded ${res?.target}`,\n            description: ` tx ID : ${res?.id}`,\n            duration: 10000,\n          });\n        })\n        .catch(e => {\n          toast({\n            status: \"error\",\n            title: `Failed to fund - ${e.data?.message || e.message}`,\n          });\n        });\n    }\n  };\n\n  const withdraw = async () => {\n    if (bundler && withdrawAmount) {\n      toast({ status: \"info\", title: \"Withdrawing..\", duration: 15000 });\n      const value = parseInput(withdrawAmount);\n      if (!value) return;\n      await bundler\n        .withdrawBalance(value)\n        .then(data => {\n          toast({\n            status: \"success\",\n            title: `Withdrawal successful - ${data.data?.tx_id}`,\n            duration: 5000,\n          });\n        })\n        .catch((err: any) => {\n          toast({\n            status: \"error\",\n            title: \"Withdrawal Unsuccessful!\",\n            description: err.message,\n            duration: 5000,\n          });\n        });\n    }\n  };\n\n  // field change event handlers\n\n  const updateAddress = (evt: React.BaseSyntheticEvent) => {\n    setBundlerAddress(evt.target.value);\n  };\n\n  const updateFundAmount = (evt: React.BaseSyntheticEvent) => {\n    setFundingAmount(evt.target.value);\n  };\n\n  const updateWithdrawAmount = (evt: React.BaseSyntheticEvent) => {\n    setWithdrawAmount(evt.target.value);\n  };\n\n  // upload here.\n  const updateTxt = (evt: React.BaseSyntheticEvent) => {\n    setTxt(evt.target.value);\n  };\n\n  const connectWeb3 = async (connector: any) => {\n    if (provider) {\n      await clean();\n    }\n    const p = new providers.Web3Provider(connector);\n    await p._ready();\n    return p;\n  };\n\n  /**\n   * Map of providers with initialisation code - c is the configuration object from currencyMap\n   */\n  const providerMap = {\n    MetaMask: async (c: any) => {\n      if (!window?.ethereum?.isMetaMask) return;\n      await window.ethereum.enable();\n      const provider = await connectWeb3(window.ethereum);\n      const chainId = `0x${c.chainId.toString(16)}`;\n      try {\n        // additional logic for requesting a chain switch and conditional chain add.\n        await window.ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId }],\n        });\n      } catch (e: any) {\n        if (e.code === 4902) {\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId,\n                rpcUrls: c.rpcUrls,\n                chainName: c.chainName,\n              },\n            ],\n          });\n        }\n      }\n      return provider;\n    },\n    WalletConnect: async (c: any) => {\n      return await connectWeb3(await new WalletConnectProvider(c).enable());\n    },\n  } as any;\n\n  const ethProviders = [\"MetaMask\", \"WalletConnect\"];\n\n  const currencyMap = {\n    matic: {\n      providers: ethProviders,\n      opts: {\n        chainId: 137,\n        chainName: \"Polygon Mainnet\",\n        rpcUrls: [\"https://polygon-rpc.com\"],\n      },\n    },\n  } as any;\n\n  /**\n   * initialises the selected provider/currency\n   * @param cname currency name\n   * @param pname provider name\n   * @returns\n   */\n  const initProvider = async () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    if (provider) {\n      setProvider(undefined);\n      setBundler(undefined);\n      setAddress(undefined);\n      return;\n    }\n\n    const pname = selection as string;\n    const cname = currency as string;\n    const p = providerMap[pname]; // get provider entry\n    const c = currencyMap[cname];\n    console.log(`loading: ${pname} for ${cname}`);\n    const providerInstance = await p(c.opts).catch((e: Error) => {\n      toast({\n        status: \"error\",\n        title: `Failed to load provider ${pname}`,\n        duration: 10000,\n      });\n      console.log(e);\n      return;\n    });\n    setProvider(providerInstance);\n  };\n\n  const initBundlr = async () => {\n    const bundlr = new WebBundlr(bundlerHttpAddress, currency, provider);\n    try {\n      // Check for valid bundlr node\n      await bundlr.utils.getBundlerAddress(currency);\n    } catch {\n      toast({\n        status: \"error\",\n        title: `Failed to connect to bundlr ${bundlerHttpAddress}`,\n        duration: 10000,\n      });\n      return;\n    }\n    try {\n      await bundlr.ready();\n    } catch (err) {\n      console.log(err);\n    } //@ts-ignore\n    if (!bundlr.address) {\n      console.log(\"something went wrong\");\n    }\n    toast({ status: \"success\", title: `Connected to ${bundlerHttpAddress}` });\n    setAddress(bundlr?.address);\n    setBundler(bundlr);\n  };\n\n  const toProperCase = (s: string) => {\n    return s.charAt(0).toUpperCase() + s.substring(1).toLowerCase();\n  };\n  const toggleRefresh = async () => {\n    if (intervalRef) {\n      clearInterval(intervalRef.current);\n    }\n\n    intervalRef.current = window.setInterval(async () => {\n      bundler\n        ?.getLoadedBalance()\n        .then(r => {\n          setBalance(r.toString());\n        })\n        .catch(_ => clearInterval(intervalRef.current));\n    }, 5000);\n  };\n\n  // parse decimal input into atomic units\n  const parseInput = (input: string | number) => {\n    const conv = new BigNumber(input).multipliedBy(\n      bundler!.currencyConfig.base[1]\n    );\n    if (conv.isLessThan(1)) {\n      toast({ status: \"error\", title: `Value too small!` });\n      return;\n    }\n    return conv;\n  };\n\n  return (\n    <VStack mt={10}>\n      <HStack>\n        {\" \"}\n        <Menu>\n          <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n            {toProperCase(currency)}\n          </MenuButton>\n          <MenuList>\n            {Object.keys(currencyMap).map(v => {\n              return (\n                <MenuItem\n                  key={v}\n                  onClick={() => {\n                    clean();\n                    setCurrency(v);\n                  }}\n                >\n                  {toProperCase(v)}\n                </MenuItem>\n              ); // proper/title case\n            })}\n          </MenuList>\n        </Menu>\n        <Menu>\n          <MenuButton\n            disabled={currency === defaultCurrency}\n            as={Button}\n            rightIcon={<ChevronDownIcon />}\n          >\n            {selection}\n          </MenuButton>\n          <MenuList>\n            {Object.keys(providerMap).map(v => {\n              return currencyMap[currency] &&\n                currencyMap[currency].providers.indexOf(v) !== -1 ? (\n                <MenuItem key={v} onClick={() => setSelection(v)}>\n                  {v}\n                </MenuItem>\n              ) : undefined;\n            })}\n          </MenuList>\n        </Menu>\n        <Button\n          w={300}\n          colorScheme=\"green\"\n          disabled={\n            !(\n              selection !== defaultSelection &&\n              currency !== defaultCurrency &&\n              bundlerHttpAddress.length > 8\n            )\n          }\n          onClick={async () => await initProvider()}\n        >\n          {provider ? \"Disconnect\" : \"Connect\"}\n        </Button>\n      </HStack>\n      <Text>Connected Account: {address ?? \"None\"}</Text>\n      <HStack w={1000}>\n        <Button\n          w={300}\n          colorScheme=\"green\"\n          disabled={!provider}\n          onClick={async () => await initBundlr()}\n        >\n          Connect to Bundlr\n        </Button>\n        <Input\n          value={bundlerHttpAddress}\n          onChange={updateAddress}\n          placeholder=\"Bundler Address\"\n        />\n        {bundler && (\n          <>\n            <Button\n              w={300}\n              onClick={async () => {\n                address &&\n                  bundler!.getBalance(address).then((res: BigNumber) => {\n                    setBalance(res.toString());\n                  });\n                await toggleRefresh();\n              }}\n            >\n              Get Balance\n            </Button>\n            {balance && (\n              <Tooltip label={`(${balance} ${bundler.currencyConfig.base[0]})`}>\n                <Text style={{ whiteSpace: \"nowrap\" }}>\n                  {bundler.utils\n                    .unitConverter(balance)\n                    .toFixed(4, 2)\n                    .toString()}{\" \"}\n                  {bundler.currencyConfig.ticker.toLowerCase()}\n                </Text>\n              </Tooltip>\n            )}\n          </>\n        )}\n      </HStack>\n      {bundler && (\n        <>\n          <HStack w={1000}>\n            <Button w={300} onClick={fund}>\n              Fund\n            </Button>\n            <Input\n              placeholder={`${toProperCase(currency)} Amount`}\n              value={fundAmount}\n              onChange={updateFundAmount}\n            />\n            <Button w={300} onClick={withdraw}>\n              Withdraw\n            </Button>\n            <Input\n              placeholder={`${toProperCase(currency)} Amount`}\n              value={withdrawAmount}\n              onChange={updateWithdrawAmount}\n            />\n          </HStack>\n\n          <Divider w={1000} />\n          <Text fontSize=\"xl\"><b>Choice 0x01. Upload File</b></Text>\n\n          <HStack>\n            <Text>Type(default is \"image/png\"):</Text>\n            <Input\n              onChange={event => setTagValue(event.target.value)}\n              placeholder=\"image/png\"\n            />\n          </HStack>\n\n          <Button w={300} onClick={handleFileClick}>\n            Select file from Device\n          </Button>\n          {img && (\n            <>\n              <HStack>\n                <Button w={300} onClick={handlePrice}>\n                  Get Price\n                </Button>\n                {price && (\n                  <Text>{`Cost: ${bundler.utils\n                    .unitConverter(price)\n                    .toString()} ${bundler.currencyConfig.ticker.toLowerCase()} `}</Text>\n                )}\n              </HStack>\n              <Button w={300} onClick={uploadFile}>\n                Upload File to Bundlr Network\n              </Button>\n            </>\n          )}\n\n          <Divider w={1000} />\n          <Text fontSize=\"xl\"><b>Choice 0x02.Upload Code or Any Other Txt</b></Text>\n\n          <HStack>\n            <Textarea\n              onChange={updateTxt}\n              style={{ minHeight: \"300px\", marginTop: \"5px\", width: \"500px\" }}\n            ></Textarea>\n          </HStack>\n          <HStack>\n            <Text>Type(default is \"application/elixir\"):</Text>\n            <Input\n              onChange={event => setTagValueOfTxt(event.target.value)}\n              placeholder=\"application/elixir\"\n            />\n          </HStack>\n\n          <HStack\n            w={1000}\n            style={{ display: \"flex\", justifyContent: \"center\" }}\n          >\n            <Button w={300} onClick={handleTxtPrice}>\n              Get Price\n            </Button>\n            {txtPrice && (\n              <Text>\n                {`Cost: ${bundler.utils\n                  .unitConverter(txtPrice)\n                  .toString()} ${bundler.currencyConfig.ticker.toLowerCase()} `}\n              </Text>\n            )}\n          </HStack>\n          <Button w={300} onClick={uploadTxt}>\n            Upload Text to Bundlr Network\n          </Button>\n\n          <Text fontSize=\"lg\">\n            Result Json:\n          </Text>\n          <Code w={300}>\n            &#123; <br></br>\n            &nbsp;&nbsp;&nbsp;&nbsp;\"tx_id\": \"{window.lastTxId}\", <br></br>\n            &nbsp;&nbsp;&nbsp;&nbsp;\"resource_link\": \"https://arweave.net/{window.lastTxId}\", <br></br>\n            &nbsp;&nbsp;&nbsp;&nbsp;\"uploader\": \"{address}\", <br></br>\n            &nbsp;&nbsp;&nbsp;&nbsp;\"copy_from\": \"bundlr\"<br></br>\n            &#125;\n          </Code>\n\n          <Text fontSize=\"lg\">\n            Signature:\n          </Text>\n          <Text>\n            {sig}\n          </Text>\n\n\n\n          <CopyToClipboard text={`{ \"uploader\": \"${address}\", \"tx_hash\": \"${lastTxId}\", \"resource_link\": \"https://arweave.net/${lastTxId}\", \"copy_from\": \"bundlr\" }`}>\n            <Button width='300px'>Copy full JSON</Button>\n          </CopyToClipboard>\n\n          <CopyToClipboard text={`https://arweave.net/${lastTxId}`}>\n            <Button width='300px'>Copy resource link only</Button>\n          </CopyToClipboard>\n\n          <Button w={300} onClick={signMsg}>\n            generate signature\n          </Button>\n\n          <CopyToClipboard text={`\n            {\n              \"payload\":\n                { \"uploader\": \"${address}\", \"tx_hash\": \"${lastTxId}\", \"resource_link\": \"https://arweave.net/${lastTxId}\", \"copy_from\": \"bundlr\" },\n              \"signature\":\n                \"${sig}\"\n            }\n\n            `}>\n            <Button width='300px'>Copy JSON with signature to Clipboard</Button>\n          </CopyToClipboard>\n        </>\n      )}\n    </VStack>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { ChakraProvider, theme } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}